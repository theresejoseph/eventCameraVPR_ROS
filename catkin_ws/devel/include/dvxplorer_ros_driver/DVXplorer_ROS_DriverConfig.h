//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the dvxplorer_ros_driver package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __dvxplorer_ros_driver__DVXPLORER_ROS_DRIVERCONFIG_H__
#define __dvxplorer_ros_driver__DVXPLORER_ROS_DRIVERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace dvxplorer_ros_driver
{
  class DVXplorer_ROS_DriverConfigStatics;

  class DVXplorer_ROS_DriverConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(DVXplorer_ROS_DriverConfig &config, const DVXplorer_ROS_DriverConfig &max, const DVXplorer_ROS_DriverConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const DVXplorer_ROS_DriverConfig &config1, const DVXplorer_ROS_DriverConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, DVXplorer_ROS_DriverConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const DVXplorer_ROS_DriverConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, DVXplorer_ROS_DriverConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const DVXplorer_ROS_DriverConfig &config) const = 0;
      virtual void getValue(const DVXplorer_ROS_DriverConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T DVXplorer_ROS_DriverConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T DVXplorer_ROS_DriverConfig::* field;

      virtual void clamp(DVXplorer_ROS_DriverConfig &config, const DVXplorer_ROS_DriverConfig &max, const DVXplorer_ROS_DriverConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const DVXplorer_ROS_DriverConfig &config1, const DVXplorer_ROS_DriverConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, DVXplorer_ROS_DriverConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const DVXplorer_ROS_DriverConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, DVXplorer_ROS_DriverConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const DVXplorer_ROS_DriverConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const DVXplorer_ROS_DriverConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, DVXplorer_ROS_DriverConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, DVXplorer_ROS_DriverConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(DVXplorer_ROS_DriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("streaming_rate"==(*_i)->name){streaming_rate = boost::any_cast<int>(val);}
        if("max_events"==(*_i)->name){max_events = boost::any_cast<int>(val);}
      }
    }

    int streaming_rate;
int max_events;

    bool state;
    std::string name;

    class DYNAMIC_VISION_SENSOR
{
  public:
    DYNAMIC_VISION_SENSOR()
    {
      state = true;
      name = "Dynamic_Vision_Sensor";
    }

    void setParams(DVXplorer_ROS_DriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("dvs_enabled"==(*_i)->name){dvs_enabled = boost::any_cast<bool>(val);}
        if("bias_sensitivity"==(*_i)->name){bias_sensitivity = boost::any_cast<int>(val);}
      }
    }

    bool dvs_enabled;
int bias_sensitivity;

    bool state;
    std::string name;

    class SUBSAMPLING
{
  public:
    SUBSAMPLING()
    {
      state = true;
      name = "Subsampling";
    }

    void setParams(DVXplorer_ROS_DriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("subsample_enable"==(*_i)->name){subsample_enable = boost::any_cast<bool>(val);}
        if("subsample_vertical"==(*_i)->name){subsample_vertical = boost::any_cast<int>(val);}
        if("subsample_horizontal"==(*_i)->name){subsample_horizontal = boost::any_cast<int>(val);}
      }
    }

    bool subsample_enable;
int subsample_vertical;
int subsample_horizontal;

    bool state;
    std::string name;

    
}subsampling;

class POLARITY_CONTROL
{
  public:
    POLARITY_CONTROL()
    {
      state = true;
      name = "Polarity_control";
    }

    void setParams(DVXplorer_ROS_DriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("polarity_on_only"==(*_i)->name){polarity_on_only = boost::any_cast<bool>(val);}
        if("polarity_off_only"==(*_i)->name){polarity_off_only = boost::any_cast<bool>(val);}
        if("polarity_flatten"==(*_i)->name){polarity_flatten = boost::any_cast<bool>(val);}
      }
    }

    bool polarity_on_only;
bool polarity_off_only;
bool polarity_flatten;

    bool state;
    std::string name;

    
}polarity_control;

class DVS_REGION_OF_INTEREST
{
  public:
    DVS_REGION_OF_INTEREST()
    {
      state = true;
      name = "DVS_region_of_interest";
    }

    void setParams(DVXplorer_ROS_DriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("roi_enabled"==(*_i)->name){roi_enabled = boost::any_cast<bool>(val);}
        if("roi_start_column"==(*_i)->name){roi_start_column = boost::any_cast<int>(val);}
        if("roi_start_row"==(*_i)->name){roi_start_row = boost::any_cast<int>(val);}
        if("roi_end_column"==(*_i)->name){roi_end_column = boost::any_cast<int>(val);}
        if("roi_end_row"==(*_i)->name){roi_end_row = boost::any_cast<int>(val);}
      }
    }

    bool roi_enabled;
int roi_start_column;
int roi_start_row;
int roi_end_column;
int roi_end_row;

    bool state;
    std::string name;

    
}dvs_region_of_interest;

}dynamic_vision_sensor;

class INERTIAL_MEASUREMENT_UNIT
{
  public:
    INERTIAL_MEASUREMENT_UNIT()
    {
      state = true;
      name = "Inertial_Measurement_Unit";
    }

    void setParams(DVXplorer_ROS_DriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("imu_enabled"==(*_i)->name){imu_enabled = boost::any_cast<bool>(val);}
        if("imu_acc_scale"==(*_i)->name){imu_acc_scale = boost::any_cast<int>(val);}
        if("imu_gyro_scale"==(*_i)->name){imu_gyro_scale = boost::any_cast<int>(val);}
      }
    }

    bool imu_enabled;
int imu_acc_scale;
int imu_gyro_scale;

    bool state;
    std::string name;

    
}inertial_measurement_unit;

}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int streaming_rate;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_events;
//#line 10 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool dvs_enabled;
//#line 19 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int bias_sensitivity;
//#line 30 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool subsample_enable;
//#line 31 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int subsample_vertical;
//#line 32 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int subsample_horizontal;
//#line 36 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool polarity_on_only;
//#line 37 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool polarity_off_only;
//#line 38 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool polarity_flatten;
//#line 42 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool roi_enabled;
//#line 43 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int roi_start_column;
//#line 44 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int roi_start_row;
//#line 45 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int roi_end_column;
//#line 46 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int roi_end_row;
//#line 50 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      bool imu_enabled;
//#line 67 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int imu_acc_scale;
//#line 68 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      int imu_gyro_scale;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("DVXplorer_ROS_DriverConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const DVXplorer_ROS_DriverConfig &__max__ = __getMax__();
      const DVXplorer_ROS_DriverConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const DVXplorer_ROS_DriverConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const DVXplorer_ROS_DriverConfig &__getDefault__();
    static const DVXplorer_ROS_DriverConfig &__getMax__();
    static const DVXplorer_ROS_DriverConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const DVXplorer_ROS_DriverConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void DVXplorer_ROS_DriverConfig::ParamDescription<std::string>::clamp(DVXplorer_ROS_DriverConfig &config, const DVXplorer_ROS_DriverConfig &max, const DVXplorer_ROS_DriverConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class DVXplorer_ROS_DriverConfigStatics
  {
    friend class DVXplorer_ROS_DriverConfig;

    DVXplorer_ROS_DriverConfigStatics()
    {
DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT, DVXplorer_ROS_DriverConfig> Default("Default", "", 0, 0, true, &DVXplorer_ROS_DriverConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.streaming_rate = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.streaming_rate = 10000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.streaming_rate = 30;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("streaming_rate", "int", 32, "integration time (0 is instant sending)", "", &DVXplorer_ROS_DriverConfig::streaming_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("streaming_rate", "int", 32, "integration time (0 is instant sending)", "", &DVXplorer_ROS_DriverConfig::streaming_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_events = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_events = 100000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_events = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("max_events", "int", 32, "maximum events per packet (0 is no limit)", "", &DVXplorer_ROS_DriverConfig::max_events)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("max_events", "int", 32, "maximum events per packet (0 is no limit)", "", &DVXplorer_ROS_DriverConfig::max_events)));
DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR, DVXplorer_ROS_DriverConfig::DEFAULT> Dynamic_Vision_Sensor("Dynamic_Vision_Sensor", "", 0, 1, true, &DVXplorer_ROS_DriverConfig::DEFAULT::dynamic_vision_sensor);
//#line 10 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.dvs_enabled = 0;
//#line 10 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.dvs_enabled = 1;
//#line 10 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.dvs_enabled = 1;
//#line 10 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Dynamic_Vision_Sensor.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("dvs_enabled", "bool", 1, "enables DVS", "", &DVXplorer_ROS_DriverConfig::dvs_enabled)));
//#line 10 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("dvs_enabled", "bool", 1, "enables DVS", "", &DVXplorer_ROS_DriverConfig::dvs_enabled)));
//#line 19 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.bias_sensitivity = 0;
//#line 19 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.bias_sensitivity = 4;
//#line 19 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.bias_sensitivity = 2;
//#line 19 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Dynamic_Vision_Sensor.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("bias_sensitivity", "int", 1, "Bias sensitivity", "{'enum': [{'name': 'Very_Low', 'type': 'int', 'value': 0, 'srcline': 13, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Very low contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Low', 'type': 'int', 'value': 1, 'srcline': 14, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Low contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Default', 'type': 'int', 'value': 2, 'srcline': 15, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Default contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'High', 'type': 'int', 'value': 3, 'srcline': 16, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'High contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Very_High', 'type': 'int', 'value': 4, 'srcline': 17, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Very high contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Bias sensitivity'}", &DVXplorer_ROS_DriverConfig::bias_sensitivity)));
//#line 19 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("bias_sensitivity", "int", 1, "Bias sensitivity", "{'enum': [{'name': 'Very_Low', 'type': 'int', 'value': 0, 'srcline': 13, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Very low contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Low', 'type': 'int', 'value': 1, 'srcline': 14, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Low contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Default', 'type': 'int', 'value': 2, 'srcline': 15, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Default contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'High', 'type': 'int', 'value': 3, 'srcline': 16, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'High contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Very_High', 'type': 'int', 'value': 4, 'srcline': 17, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'Very high contrast sensitivity', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Bias sensitivity'}", &DVXplorer_ROS_DriverConfig::bias_sensitivity)));
DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::SUBSAMPLING, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR> Subsampling("Subsampling", "", 1, 2, true, &DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::subsampling);
//#line 30 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.subsample_enable = 0;
//#line 30 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.subsample_enable = 1;
//#line 30 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.subsample_enable = 0;
//#line 30 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Subsampling.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("subsample_enable", "bool", 2, "Enable subsampling", "", &DVXplorer_ROS_DriverConfig::subsample_enable)));
//#line 30 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("subsample_enable", "bool", 2, "Enable subsampling", "", &DVXplorer_ROS_DriverConfig::subsample_enable)));
//#line 31 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.subsample_vertical = 0;
//#line 31 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.subsample_vertical = 7;
//#line 31 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.subsample_vertical = 0;
//#line 31 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Subsampling.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("subsample_vertical", "int", 2, "Vertical subsampling", "{'enum': [{'name': 'None', 'type': 'int', 'value': 0, 'srcline': 24, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'No subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Half', 'type': 'int', 'value': 1, 'srcline': 25, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/2 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Fourth', 'type': 'int', 'value': 3, 'srcline': 26, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/4 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Eighth', 'type': 'int', 'value': 7, 'srcline': 27, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/8 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Subsample factor'}", &DVXplorer_ROS_DriverConfig::subsample_vertical)));
//#line 31 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("subsample_vertical", "int", 2, "Vertical subsampling", "{'enum': [{'name': 'None', 'type': 'int', 'value': 0, 'srcline': 24, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'No subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Half', 'type': 'int', 'value': 1, 'srcline': 25, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/2 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Fourth', 'type': 'int', 'value': 3, 'srcline': 26, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/4 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Eighth', 'type': 'int', 'value': 7, 'srcline': 27, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/8 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Subsample factor'}", &DVXplorer_ROS_DriverConfig::subsample_vertical)));
//#line 32 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.subsample_horizontal = 0;
//#line 32 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.subsample_horizontal = 7;
//#line 32 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.subsample_horizontal = 0;
//#line 32 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Subsampling.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("subsample_horizontal", "int", 2, "Horizontal subsampling", "{'enum': [{'name': 'None', 'type': 'int', 'value': 0, 'srcline': 24, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'No subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Half', 'type': 'int', 'value': 1, 'srcline': 25, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/2 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Fourth', 'type': 'int', 'value': 3, 'srcline': 26, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/4 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Eighth', 'type': 'int', 'value': 7, 'srcline': 27, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/8 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Subsample factor'}", &DVXplorer_ROS_DriverConfig::subsample_horizontal)));
//#line 32 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("subsample_horizontal", "int", 2, "Horizontal subsampling", "{'enum': [{'name': 'None', 'type': 'int', 'value': 0, 'srcline': 24, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': 'No subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Half', 'type': 'int', 'value': 1, 'srcline': 25, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/2 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Fourth', 'type': 'int', 'value': 3, 'srcline': 26, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/4 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Eighth', 'type': 'int', 'value': 7, 'srcline': 27, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '1/8 subsampling', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Subsample factor'}", &DVXplorer_ROS_DriverConfig::subsample_horizontal)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Subsampling.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dynamic_Vision_Sensor.groups.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::SUBSAMPLING, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR>(Subsampling)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::SUBSAMPLING, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR>(Subsampling)));
DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::POLARITY_CONTROL, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR> Polarity_control("Polarity_control", "", 1, 3, true, &DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::polarity_control);
//#line 36 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.polarity_on_only = 0;
//#line 36 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.polarity_on_only = 1;
//#line 36 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.polarity_on_only = 0;
//#line 36 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Polarity_control.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("polarity_on_only", "bool", 4, "only send ON polarity events", "", &DVXplorer_ROS_DriverConfig::polarity_on_only)));
//#line 36 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("polarity_on_only", "bool", 4, "only send ON polarity events", "", &DVXplorer_ROS_DriverConfig::polarity_on_only)));
//#line 37 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.polarity_off_only = 0;
//#line 37 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.polarity_off_only = 1;
//#line 37 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.polarity_off_only = 0;
//#line 37 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Polarity_control.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("polarity_off_only", "bool", 4, "only send OFF polarity events", "", &DVXplorer_ROS_DriverConfig::polarity_off_only)));
//#line 37 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("polarity_off_only", "bool", 4, "only send OFF polarity events", "", &DVXplorer_ROS_DriverConfig::polarity_off_only)));
//#line 38 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.polarity_flatten = 0;
//#line 38 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.polarity_flatten = 1;
//#line 38 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.polarity_flatten = 0;
//#line 38 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Polarity_control.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("polarity_flatten", "bool", 4, "flatten all polarities to ON", "", &DVXplorer_ROS_DriverConfig::polarity_flatten)));
//#line 38 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("polarity_flatten", "bool", 4, "flatten all polarities to ON", "", &DVXplorer_ROS_DriverConfig::polarity_flatten)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Polarity_control.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dynamic_Vision_Sensor.groups.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::POLARITY_CONTROL, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR>(Polarity_control)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::POLARITY_CONTROL, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR>(Polarity_control)));
DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::DVS_REGION_OF_INTEREST, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR> DVS_region_of_interest("DVS_region_of_interest", "", 1, 4, true, &DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::dvs_region_of_interest);
//#line 42 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.roi_enabled = 0;
//#line 42 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.roi_enabled = 1;
//#line 42 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.roi_enabled = 0;
//#line 42 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      DVS_region_of_interest.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("roi_enabled", "bool", 8, "enable DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_enabled)));
//#line 42 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("roi_enabled", "bool", 8, "enable DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_enabled)));
//#line 43 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.roi_start_column = 0;
//#line 43 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.roi_start_column = 639;
//#line 43 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.roi_start_column = 0;
//#line 43 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      DVS_region_of_interest.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_start_column", "int", 8, "start position on the X axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_start_column)));
//#line 43 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_start_column", "int", 8, "start position on the X axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_start_column)));
//#line 44 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.roi_start_row = 0;
//#line 44 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.roi_start_row = 479;
//#line 44 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.roi_start_row = 0;
//#line 44 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      DVS_region_of_interest.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_start_row", "int", 8, "start position on the Y axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_start_row)));
//#line 44 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_start_row", "int", 8, "start position on the Y axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_start_row)));
//#line 45 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.roi_end_column = 0;
//#line 45 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.roi_end_column = 639;
//#line 45 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.roi_end_column = 639;
//#line 45 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      DVS_region_of_interest.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_end_column", "int", 8, "end position on the X axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_end_column)));
//#line 45 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_end_column", "int", 8, "end position on the X axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_end_column)));
//#line 46 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.roi_end_row = 0;
//#line 46 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.roi_end_row = 479;
//#line 46 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.roi_end_row = 479;
//#line 46 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      DVS_region_of_interest.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_end_row", "int", 8, "end position on the Y axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_end_row)));
//#line 46 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("roi_end_row", "int", 8, "end position on the Y axis for DVS region of interest", "", &DVXplorer_ROS_DriverConfig::roi_end_row)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      DVS_region_of_interest.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dynamic_Vision_Sensor.groups.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::DVS_REGION_OF_INTEREST, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR>(DVS_region_of_interest)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR::DVS_REGION_OF_INTEREST, DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR>(DVS_region_of_interest)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dynamic_Vision_Sensor.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR, DVXplorer_ROS_DriverConfig::DEFAULT>(Dynamic_Vision_Sensor)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::DYNAMIC_VISION_SENSOR, DVXplorer_ROS_DriverConfig::DEFAULT>(Dynamic_Vision_Sensor)));
DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::INERTIAL_MEASUREMENT_UNIT, DVXplorer_ROS_DriverConfig::DEFAULT> Inertial_Measurement_Unit("Inertial_Measurement_Unit", "", 0, 5, true, &DVXplorer_ROS_DriverConfig::DEFAULT::inertial_measurement_unit);
//#line 50 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.imu_enabled = 0;
//#line 50 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.imu_enabled = 1;
//#line 50 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.imu_enabled = 1;
//#line 50 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Inertial_Measurement_Unit.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("imu_enabled", "bool", 16, "enables IMU", "", &DVXplorer_ROS_DriverConfig::imu_enabled)));
//#line 50 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<bool>("imu_enabled", "bool", 16, "enables IMU", "", &DVXplorer_ROS_DriverConfig::imu_enabled)));
//#line 67 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.imu_acc_scale = 0;
//#line 67 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.imu_acc_scale = 3;
//#line 67 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.imu_acc_scale = 1;
//#line 67 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Inertial_Measurement_Unit.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("imu_acc_scale", "int", 16, "Full scale of the accelerometer", "{'enum': [{'name': '2g', 'type': 'int', 'value': 0, 'srcline': 53, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 2 g', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '4g', 'type': 'int', 'value': 1, 'srcline': 54, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 4 g', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '8g', 'type': 'int', 'value': 2, 'srcline': 55, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 8 g', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '16g', 'type': 'int', 'value': 3, 'srcline': 56, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 16 g', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Full scale of the accelerometer'}", &DVXplorer_ROS_DriverConfig::imu_acc_scale)));
//#line 67 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("imu_acc_scale", "int", 16, "Full scale of the accelerometer", "{'enum': [{'name': '2g', 'type': 'int', 'value': 0, 'srcline': 53, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 2 g', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '4g', 'type': 'int', 'value': 1, 'srcline': 54, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 4 g', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '8g', 'type': 'int', 'value': 2, 'srcline': 55, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 8 g', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '16g', 'type': 'int', 'value': 3, 'srcline': 56, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 16 g', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Full scale of the accelerometer'}", &DVXplorer_ROS_DriverConfig::imu_acc_scale)));
//#line 68 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __min__.imu_gyro_scale = 0;
//#line 68 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __max__.imu_gyro_scale = 4;
//#line 68 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __default__.imu_gyro_scale = 2;
//#line 68 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      Inertial_Measurement_Unit.abstract_parameters.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("imu_gyro_scale", "int", 16, "Full scale of the gyroscope", "{'enum': [{'name': '2000degps', 'type': 'int', 'value': 0, 'srcline': 60, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 2000 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '1000degps', 'type': 'int', 'value': 1, 'srcline': 61, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 1000 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '500degps', 'type': 'int', 'value': 2, 'srcline': 62, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 500 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '2500degps', 'type': 'int', 'value': 3, 'srcline': 63, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 250 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '125degps', 'type': 'int', 'value': 4, 'srcline': 64, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 125 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Full scale of the gyroscope'}", &DVXplorer_ROS_DriverConfig::imu_gyro_scale)));
//#line 68 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      __param_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::ParamDescription<int>("imu_gyro_scale", "int", 16, "Full scale of the gyroscope", "{'enum': [{'name': '2000degps', 'type': 'int', 'value': 0, 'srcline': 60, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 2000 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '1000degps', 'type': 'int', 'value': 1, 'srcline': 61, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 1000 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '500degps', 'type': 'int', 'value': 2, 'srcline': 62, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 500 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '2500degps', 'type': 'int', 'value': 3, 'srcline': 63, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 250 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '125degps', 'type': 'int', 'value': 4, 'srcline': 64, 'srcfile': '/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg', 'description': '+/- 125 deg/s', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Full scale of the gyroscope'}", &DVXplorer_ROS_DriverConfig::imu_gyro_scale)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Inertial_Measurement_Unit.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::INERTIAL_MEASUREMENT_UNIT, DVXplorer_ROS_DriverConfig::DEFAULT>(Inertial_Measurement_Unit)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT::INERTIAL_MEASUREMENT_UNIT, DVXplorer_ROS_DriverConfig::DEFAULT>(Inertial_Measurement_Unit)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr(new DVXplorer_ROS_DriverConfig::GroupDescription<DVXplorer_ROS_DriverConfig::DEFAULT, DVXplorer_ROS_DriverConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    DVXplorer_ROS_DriverConfig __max__;
    DVXplorer_ROS_DriverConfig __min__;
    DVXplorer_ROS_DriverConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const DVXplorer_ROS_DriverConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static DVXplorer_ROS_DriverConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &DVXplorer_ROS_DriverConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const DVXplorer_ROS_DriverConfig &DVXplorer_ROS_DriverConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const DVXplorer_ROS_DriverConfig &DVXplorer_ROS_DriverConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const DVXplorer_ROS_DriverConfig &DVXplorer_ROS_DriverConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<DVXplorer_ROS_DriverConfig::AbstractParamDescriptionConstPtr> &DVXplorer_ROS_DriverConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<DVXplorer_ROS_DriverConfig::AbstractGroupDescriptionConstPtr> &DVXplorer_ROS_DriverConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const DVXplorer_ROS_DriverConfigStatics *DVXplorer_ROS_DriverConfig::__get_statics__()
  {
    const static DVXplorer_ROS_DriverConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = DVXplorer_ROS_DriverConfigStatics::get_instance();

    return statics;
  }

//#line 13 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Very_Low = 0;
//#line 14 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Low = 1;
//#line 15 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Default = 2;
//#line 16 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_High = 3;
//#line 17 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Very_High = 4;
//#line 24 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_None = 0;
//#line 25 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Half = 1;
//#line 26 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Fourth = 3;
//#line 27 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_Eighth = 7;
//#line 53 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_2g = 0;
//#line 54 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_4g = 1;
//#line 55 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_8g = 2;
//#line 56 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_16g = 3;
//#line 60 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_2000degps = 0;
//#line 61 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_1000degps = 1;
//#line 62 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_500degps = 2;
//#line 63 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_2500degps = 3;
//#line 64 "/home/tresjsph/catkin_ws/src/rpg_dvs_ros/dvxplorer_ros_driver/cfg/DVXplorer_ROS_Driver.cfg"
      const int DVXplorer_ROS_Driver_125degps = 4;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __DVXPLORER_ROS_DRIVERRECONFIGURATOR_H__
